初始化git:
	$ git config --global user.name "<用户名>"
	$ git config --global user.email "<电子邮件>"
	$ git config --global color.ui auto
开始玩git:
	$ mkdir <仓库名>
	$ cd <仓库名>
	$ git init
	$ git add <文件名>
	$ git commit -m "提交说明"
	$ git status
	$ git log
	$ git relog
	$ git reset --hard commit_id
	$ git diff 		#是工作区(work dict)和暂存区(stage)的比较
	$ git diff --cached     #是暂存区(stage)和分支(master)的比较
	$ git checkout -- file
	命令git checkout -- file意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	********************************************************************************************
	Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
注意以下几点:
	你可以为Git命令设定别名。例如：把「checkout」缩略为「co」，然后就使用「co」来执行命令。
	$ git config --global alias.co checkout
	按照以下步骤把新创建的tutorial目录设置到Git数据库。
	指定参数「.」，可以把所有的文件加入到索引。
	$ git add .
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
	$ rm test.txt
	这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：
	现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
		$ git rm test.txt
		rm 'test.txt'
		$ git commit -m "remove test.txt"
		[master d17efd8] remove test.txt
		 1 file changed, 1 deletion(-)
		 delete mode 100644 test.txt
	现在，文件就从版本库中被删除了。

	另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：

	$ git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
分支（branch）的使用：
	Git鼓励大量使用分支：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
*************************************************************************
问题描述
解决方法
问题描述
本地初始化的项目 与 github 版本不一致, 导致无法提交

$ git pull origin master
来自 https://github.com/itaken/python-login-demo
 * branch            master     -> FETCH_HEAD
fatal: 拒绝合并无关的历史
解决方法
在pull 时候, 添加–allow-unrelated-histories参数 即可.






